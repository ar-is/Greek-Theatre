// <auto-generated />
using System;
using GreekTheater.API.Persistence.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GreekTheater.API.Persistence.Migrations
{
    [DbContext(typeof(GreekTheaterAPIContext))]
    [Migration("20200126192408_InitialModels")]
    partial class InitialModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GreekTheater.API.Core.Entities.Acting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PerformanceId")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("Guid")
                        .HasName("Guid")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("PerformanceId");

                    b.ToTable("Acting");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActorId = 1,
                            Guid = new Guid("a9eb16c3-d4d6-4280-89ad-8e1bba35be38"),
                            PerformanceId = 1,
                            RoleName = "Don Alfonso"
                        },
                        new
                        {
                            Id = 2,
                            ActorId = 3,
                            Guid = new Guid("8b1877a9-1896-4b7b-a1c4-97957a919958"),
                            PerformanceId = 1,
                            RoleName = "Don Juan"
                        },
                        new
                        {
                            Id = 3,
                            ActorId = 1,
                            Guid = new Guid("ef8fd6fb-0f54-4247-b2c5-dcc851034b1d"),
                            PerformanceId = 2,
                            RoleName = "Vladimir"
                        },
                        new
                        {
                            Id = 4,
                            ActorId = 2,
                            Guid = new Guid("344ac739-b7ff-4b50-916b-77882688be7c"),
                            PerformanceId = 2,
                            RoleName = "Estragon"
                        },
                        new
                        {
                            Id = 5,
                            ActorId = 1,
                            Guid = new Guid("8a113a93-2051-490d-9329-bad2920e9b97"),
                            PerformanceId = 3,
                            RoleName = "McLeavy"
                        },
                        new
                        {
                            Id = 6,
                            ActorId = 2,
                            Guid = new Guid("5c4a34ac-be45-4419-8a8b-612c020b38cf"),
                            PerformanceId = 3,
                            RoleName = "Fay"
                        });
                });

            modelBuilder.Entity("GreekTheater.API.Core.Entities.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateOfDeath")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .HasName("Guid")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Actor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTimeOffset(new DateTime(1976, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            FirstName = "Christos",
                            Guid = new Guid("7b75a444-994d-4936-96bf-9c3c0804e42d"),
                            LastName = "Loulis"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTimeOffset(new DateTime(1988, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            FirstName = "Iro",
                            Guid = new Guid("a51f9b12-fb95-43e2-b010-733d53faf235"),
                            LastName = "Mpezou"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTimeOffset(new DateTime(1948, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            DateOfDeath = new DateTimeOffset(new DateTime(2015, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            FirstName = "Minas",
                            Guid = new Guid("4d459461-59da-473d-938e-f5c7c03d12d7"),
                            LastName = "Chatzisavvas"
                        });
                });

            modelBuilder.Entity("GreekTheater.API.Core.Entities.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset?>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DateOfDeath")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .HasName("Guid")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Director");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTimeOffset(new DateTime(1956, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            FirstName = "Michail",
                            Guid = new Guid("7b75a444-994d-4936-96bf-9c3c0804e42d"),
                            LastName = "Marmarinos"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTimeOffset(new DateTime(1950, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0)),
                            FirstName = "Ioannis",
                            Guid = new Guid("a51f9b12-fb95-43e2-b010-733d53faf235"),
                            LastName = "Chouvardas"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTimeOffset(new DateTime(1962, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            FirstName = "Efi",
                            Guid = new Guid("4d459461-59da-473d-938e-f5c7c03d12d7"),
                            LastName = "Theodorou"
                        });
                });

            modelBuilder.Entity("GreekTheater.API.Core.Entities.Genre", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Guid")
                        .HasName("Guid")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Guid = new Guid("ca6a17f8-2045-4113-bbdb-3230427ae5cd"),
                            Name = "Musical"
                        },
                        new
                        {
                            Id = (byte)2,
                            Guid = new Guid("905d1d8f-d286-4ef2-a72e-c76353f342cb"),
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = (byte)3,
                            Guid = new Guid("31e18a42-525d-42c2-99e6-93c6149a8d2f"),
                            Name = "Drama"
                        },
                        new
                        {
                            Id = (byte)4,
                            Guid = new Guid("d64e4e3c-6d5b-4818-9039-246861177572"),
                            Name = "Tragedy"
                        },
                        new
                        {
                            Id = (byte)5,
                            Guid = new Guid("8cc8da1e-56a7-487c-9786-548271ef9586"),
                            Name = "Opera"
                        },
                        new
                        {
                            Id = (byte)6,
                            Guid = new Guid("61cc3a5f-cab1-4104-8acf-3a0440ebdbc8"),
                            Name = "Theatre of the Absurd‎"
                        });
                });

            modelBuilder.Entity("GreekTheater.API.Core.Entities.Performance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("PremiereDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.HasIndex("Guid")
                        .HasName("Guid")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Performance");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DirectorId = 2,
                            Guid = new Guid("7b75a444-994d-4936-96bf-9c3c0804e42d"),
                            PremiereDate = new DateTimeOffset(new DateTime(1996, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Title = "Don Juan"
                        },
                        new
                        {
                            Id = 2,
                            DirectorId = 1,
                            Guid = new Guid("a51f9b12-fb95-43e2-b010-733d53faf235"),
                            PremiereDate = new DateTimeOffset(new DateTime(2017, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Title = "Waiting for Godot"
                        },
                        new
                        {
                            Id = 3,
                            DirectorId = 3,
                            Guid = new Guid("4d459461-59da-473d-938e-f5c7c03d12d7"),
                            Title = "Loot"
                        });
                });

            modelBuilder.Entity("GreekTheater.API.Core.Entities.PerformanceGenre", b =>
                {
                    b.Property<byte>("GenreId")
                        .HasColumnType("tinyint");

                    b.Property<int>("PerformanceId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "PerformanceId");

                    b.HasIndex("PerformanceId");

                    b.ToTable("PerformanceGenre");

                    b.HasData(
                        new
                        {
                            GenreId = (byte)1,
                            PerformanceId = 1
                        },
                        new
                        {
                            GenreId = (byte)2,
                            PerformanceId = 1
                        },
                        new
                        {
                            GenreId = (byte)3,
                            PerformanceId = 1
                        },
                        new
                        {
                            GenreId = (byte)3,
                            PerformanceId = 2
                        },
                        new
                        {
                            GenreId = (byte)6,
                            PerformanceId = 2
                        },
                        new
                        {
                            GenreId = (byte)2,
                            PerformanceId = 3
                        },
                        new
                        {
                            GenreId = (byte)3,
                            PerformanceId = 3
                        });
                });

            modelBuilder.Entity("GreekTheater.API.Core.Entities.Acting", b =>
                {
                    b.HasOne("GreekTheater.API.Core.Entities.Actor", "Actor")
                        .WithMany("Actings")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GreekTheater.API.Core.Entities.Performance", "Performance")
                        .WithMany("Actings")
                        .HasForeignKey("PerformanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GreekTheater.API.Core.Entities.Performance", b =>
                {
                    b.HasOne("GreekTheater.API.Core.Entities.Director", "Director")
                        .WithMany("Performances")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GreekTheater.API.Core.Entities.PerformanceGenre", b =>
                {
                    b.HasOne("GreekTheater.API.Core.Entities.Genre", "Genre")
                        .WithMany("PerformanceGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GreekTheater.API.Core.Entities.Performance", "Performance")
                        .WithMany("PerformanceGenres")
                        .HasForeignKey("PerformanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
